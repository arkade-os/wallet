/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate } from 'workbox-strategies'

import { vtxosExpiringSoon } from './lib/wallet'
import { prettyAgo } from './lib/format'

clientsClaim()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')

registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false
    } // Return true to signal that we want to use the handler.

    return true
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html'),
)

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),
)

// send notification to user
function notify(title, body) {
  self.registration.showNotification(title, { body, icon: '/arkade-icon-220.png' })
}

// notify user of expiring vtxos
function notifyUser(nextRollOver) {
  const title = `Virtual coins expiring ${prettyAgo(nextRollOver)}`
  const body = 'Open wallet to renew virtual coins'
  notify(title, body)
}

// we can't use ./lib/wallet/calcNextRollover because vtxos have different types
function calcNextRollover(vtxos) {
  return vtxos.spendableVtxos
    ? vtxos.spendableVtxos.reduce((acc, cur) => {
        const unixtimestamp = parseInt(cur.expireAt)
        return unixtimestamp < acc || acc === 0 ? unixtimestamp : acc
      }, 0)
    : 0
}

// get vtxos from server
async function getVtxos(arkAddress, serverUrl) {
  try {
    const headers = { 'Content-Type': 'application/json' }
    const response = await fetch(`${serverUrl}/v1/vtxos/${arkAddress}`, { headers })
    return await response.json()
  } catch {
    return {}
  }
}

// check for expiring vtxos
async function checkExpiringVtxos(arkAddress, serverUrl) {
  const vtxos = await getVtxos(arkAddress, serverUrl)
  const nextRollOver = calcNextRollover(vtxos)
  if (vtxosExpiringSoon(nextRollOver)) notifyUser(nextRollOver)
}

// This allows the web app to trigger actions on the service worker
self.addEventListener('message', (event) => {
  let intervalId
  if (!event.data) return
  const { data, type } = event.data
  // This allows the web app to trigger skipWaiting via
  // registration.waiting.postMessage({type: 'SKIP_WAITING'})
  if (type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
  // This allows the web app to trigger the vtxo expiration check via
  // registration.active.postMessage({type: 'START_CHECK', data: {arkAddress, serverUrl}})
  if (type === 'START_CHECK') {
    intervalId = setInterval(() => {
      checkExpiringVtxos(data.arkAddress, data.serverUrl)
    }, 4 * 60 * 60 * 1000) // every 4 hours
  }
  // This allows the web app to stop the vtxo expiration check via
  // registration.active.postMessage({type: 'STOP_CHECK'})
  if (type === 'STOP_CHECK') {
    if (intervalId) clearInterval(intervalId)
  }
})
